{
	"info": {
		"_postman_id": "1e705b84-fac8-4314-bf05-aae01e2e876b",
		"name": "ner_collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "City entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d2e89180-b51e-44fe-87af-a971b48f15bb",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('city_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"        pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.city_expected[0]) && (data.city_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get city data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.to.be.above(0);",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid to\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.city_expected = _.orderBy(data.city_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.to).to.eql(data.city_expected[i].to);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid from\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.city_expected = _.orderBy(data.city_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.from).to.eql(data.city_expected[i].from);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"        var jsonData = pm.response.json();",
							"        jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"        data.city_expected = _.orderBy(data.city_expected, [\"original_text\"]);",
							"        for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].original_text).to.eql(data.city_expected[i].original_text);",
							"        }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid value\", function() {",
							"         var jsonData = pm.response.json();",
							"         jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"         data.city_expected = _.orderBy(data.city_expected, [\"original_text\"]);",
							"         for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.value.toLowerCase()).to.eql(data.city_expected[i].value.toLowerCase());",
							"         }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid normal\", function() {",
							"         var jsonData = pm.response.json();",
							"         jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"         data.city_expected = _.orderBy(data.city_expected, [\"original_text\"]);",
							"         for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.normal).to.eql(data.city_expected[i].normal);",
							"         }",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v1/city/?message={{city_message}}&entity_name={{city_entity_name}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"city",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{city_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{city_entity_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Time Entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5c4a0338-38cf-482b-be58-de81496136bb",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('time_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"        pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.time_expected[0]) && (data.time_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get time data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.time_expected = _.orderBy(data.time_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].original_text).to.eql(data.time_expected[i].original_text); ",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid minutes\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.time_expected = _.orderBy(data.time_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.mm).to.eql(data.time_expected[i].mm); ",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid hours\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.time_expected = _.orderBy(data.time_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.hh).to.eql(data.time_expected[i].hh); ",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid normal\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.time_expected = _.orderBy(data.time_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.normal).to.eql(data.time_expected[i].normal); ",
							"       }",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v1/time/?message={{time_message}}&entity_name={{time_entity_name}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"time",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{time_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{time_entity_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Person Name Entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aab03db0-2700-4ed1-a9d4-978acce08ba1",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('person_name_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"        pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.person_name_expected[0]) && (data.person_name_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get person name data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.person_name_expected = _.orderBy(data.person_name_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].original_text).to.eql(data.person_name_expected[i].original_text);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid first_name\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.person_name_expected = _.orderBy(data.person_name_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"              pm.expect(jsonData.data[i].entity_value.first_name).to.eql(data.person_name_expected[i].first_name);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid last_name\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.person_name_expected = _.orderBy(data.person_name_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.last_name).to.eql(data.person_name_expected[i].last_name);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid middle_name\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.person_name_expected = _.orderBy(data.person_name_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.middle_name).to.eql(data.person_name_expected[i].middle_name);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid model_verified\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.person_name_expected = _.orderBy(data.person_name_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.model_verified).to.eql(data.person_name_expected[i].model_verified);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid datastore_verified\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.person_name_expected = _.orderBy(data.person_name_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.datastore_verified).to.eql(data.person_name_expected[i].datastore_verified);",
							"       }",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v1/person_name/?message={{person_name_message}}&entity_name={{person_name_entity_name}}&&bot_message={{person_name_bot_message}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"person_name",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{person_name_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{person_name_entity_name}}"
						},
						{
							"key": "bot_message",
							"value": "{{person_name_bot_message}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PNR Entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c88850db-8dc1-4ca4-bb67-66568fb04fd1",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('pnr_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"        pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.pnr_expected[0]) && (data.pnr_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get pnr data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.pnr_expected = _.orderBy(data.pnr_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].original_text).to.eql(data.pnr_expected[i].original_text);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid value\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.pnr_expected = _.orderBy(data.pnr_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.value).to.eql(data.pnr_expected[i].value);",
							"       }",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v1/pnr/?message={{pnr_message}}&entity_name={{pnr_entity_name}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"pnr",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{pnr_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{pnr_entity_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Time Range Entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6726f8f5-a85a-46c8-9d67-c483d2d68db3",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('time_range_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"        pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.time_range_expected[0]) && (data.time_range_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get time_range data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.time_range_expected = _.orderBy(data.time_range_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].original_text).to.eql(data.time_range_expected[i].original_text); ",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid minutes\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.time_range_expected = _.orderBy(data.time_range_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.mm).to.eql(data.time_range_expected[i].mm); ",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid hours\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.time_range_expected = _.orderBy(data.time_range_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.hh).to.eql(data.time_range_expected[i].hh); ",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid range\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.time_range_expected = _.orderBy(data.time_range_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.range).to.eql(data.time_range_expected[i].range); ",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid normal\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.time_range_expected = _.orderBy(data.time_range_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.normal).to.eql(data.time_range_expected[i].normal); ",
							"       }",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v1/time_with_range/?message={{time_range_message}}&entity_name={{time_range_entity_name}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"time_with_range",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{time_range_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{time_range_entity_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Regex Entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "180b0299-b3bf-4afb-acff-1642a40ada0c",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('regex_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"        pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.regex_expected[0]) && (data.regex_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get regex data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.regex_expected = _.orderBy(data.regex_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].original_text).to.eql(data.regex_expected[i].original_text);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid value\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.regex_expected = _.orderBy(data.regex_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.value).to.eql(data.regex_expected[i].value);",
							"       }",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v1/regex/?message={{regex_message}}&entity_name={{regex_entity_name}}&regex={{regex_regex}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"regex",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{regex_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{regex_entity_name}}"
						},
						{
							"key": "regex",
							"value": "{{regex_regex}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Email Entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0342e22-da7b-44f2-a55b-b52050907b35",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('email_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"        pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.email_expected[0]) && (data.email_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get email data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.email_expected = _.orderBy(data.email_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].original_text).to.eql(data.email_expected[i].original_text);",
							"       }",
							"       ",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid value\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.email_expected = _.orderBy(data.email_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"          pm.expect(jsonData.data[i].entity_value.value).to.eql(data.email_expected[i].value); ",
							"       }",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v1/email/?message={{email_message}}&entity_name={{email_entity_name}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"email",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{email_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{email_entity_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Budget Entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "912756f9-cceb-4ba3-ac67-14d83c3df8e4",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('budget_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"        pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.budget_expected[0]) && (data.budget_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get budget data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.budget_expected = _.orderBy(data.budget_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].original_text).to.eql(data.budget_expected[i].original_text);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid max_budget\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.budget_expected = _.orderBy(data.budget_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.max_budget).to.eql(data.budget_expected[i].max_budget);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid min_budget\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.budget_expected = _.orderBy(data.budget_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.min_budget).to.eql(data.budget_expected[i].min_budget);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid type\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.budget_expected = _.orderBy(data.budget_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.type).to.eql(data.budget_expected[i].type);",
							"       }",
							"    });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v1/budget/?message={{budget_message}}&entity_name={{budget_entity_name}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"budget",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{budget_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{budget_entity_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Date Entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "df576c4c-f337-4964-9cfb-a7f4e5611784",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('date_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"        pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.date_expected[0]) && (data.date_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get date data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.date_expected = _.orderBy(data.date_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].original_text).to.eql(data.date_expected[i].original_text);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid type\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.date_expected = _.orderBy(data.date_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.value.type).to.eql(data.date_expected[i].type);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid day\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.date_expected = _.orderBy(data.date_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.value.dd).to.eql(data.date_expected[i].dd);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid month\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.date_expected = _.orderBy(data.date_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.value.mm).to.eql(data.date_expected[i].mm);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid year\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.date_expected = _.orderBy(data.date_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.value.yy).to.eql(data.date_expected[i].yy);",
							"       }",
							"    });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v1/date/?message={{date_message}}&entity_name={{date_entity_name}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"date",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{date_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{date_entity_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Number Entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a1bf1b2a-f098-41d2-8c33-dd5d78ea8b4f",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('number_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"        pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.number_expected[0]) && (data.number_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get number data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.number_expected = _.orderBy(data.number_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].original_text).to.eql(data.number_expected[i].original_text); ",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid value\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.number_expected = _.orderBy(data.number_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.value).to.eql(data.number_expected[i].value); ",
							"       }",
							"    });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v1/number/?message={{number_message}}&entity_name={{number_entity_name}}&min_number_digits={{number_min_digits}}&max_number_digits={{number_max_digits}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"number",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{number_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{number_entity_name}}"
						},
						{
							"key": "min_number_digits",
							"value": "{{number_min_digits}}"
						},
						{
							"key": "max_number_digits",
							"value": "{{number_max_digits}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Number Entity V2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a1bf1b2a-f098-41d2-8c33-dd5d78ea8b4f",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('numberV2_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"        pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.numberV2_expected[0]) && (data.numberV2_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get number data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.numberV2_expected = _.orderBy(data.numberV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].original_text).to.eql(data.numberV2_expected[i].original_text); ",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid value\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.numberV2_expected = _.orderBy(data.numberV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.value).to.eql(data.numberV2_expected[i].value); ",
							"       }",
							"    });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v2/number/?message={{numberV2_message}}&entity_name={{numberV2_entity_name}}&min_number_digits={{numberV2_min_digits}}&max_number_digits={{numberV2_max_digits}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v2",
						"number",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{numberV2_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{numberV2_entity_name}}"
						},
						{
							"key": "min_number_digits",
							"value": "{{numberV2_min_digits}}"
						},
						{
							"key": "max_number_digits",
							"value": "{{numberV2_max_digits}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Number Range Entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2481d107-0e0c-4545-8576-b04e4e2ff818",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('number_range_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"        pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.number_range_expected[0]) && (data.number_range_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get number_range data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.number_range_expected = _.orderBy(data.number_range_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].original_text).to.eql(data.number_range_expected[i].original_text);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid min_value\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.number_range_expected = _.orderBy(data.number_range_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.min_value).to.eql(data.number_range_expected[i].min_value);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid max_value\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.number_range_expected = _.orderBy(data.number_range_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.max_value).to.eql(data.number_range_expected[i].max_value);",
							"       }",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v2/number_range/?message={{number_range_message}}&entity_name={{number_range_entity_name}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v2",
						"number_range",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{number_range_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{number_range_entity_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Phone number entity V2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e6e7a3fe-9a22-49a0-8ca9-cdffb794f743",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('phoneV2_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"        pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.phoneV2_expected[0]) && (data.phoneV2_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get phone number data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.phoneV2_expected = _.orderBy(data.phoneV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].original_text).to.eql(data.phoneV2_expected[i].original_text);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid value\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.phoneV2_expected = _.orderBy(data.phoneV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.value).to.eql(data.phoneV2_expected[i].value);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid country_calling_code\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.phoneV2_expected = _.orderBy(data.phoneV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.country_calling_code).to.eql(data.phoneV2_expected[i].country_calling_code);",
							"       }",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v2/phone_number/?message={{phoneV2_message}}&entity_name={{phoneV2_entity_name}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v2",
						"phone_number",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{phoneV2_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{phoneV2_entity_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Phone number entity",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4b978b73-2ca4-4263-afcb-ae44affa1fed",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('phoneV1_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"        pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.phoneV1_expected[0]) && (data.phoneV1_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get phone number data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.phoneV1_expected = _.orderBy(data.phoneV1_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].original_text).to.eql(data.phoneV1_expected[i].original_text);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid value\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.phoneV1_expected = _.orderBy(data.phoneV1_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.value).to.eql(data.phoneV1_expected[i].value);",
							"       }",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v1/phone_number/?message={{phoneV1_message}}&entity_name={{phoneV1_entity_name}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"phone_number",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{phoneV1_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{phoneV1_entity_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Date Entity V2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "740b024e-dd31-40e6-8232-d5f6cc314688",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('dateV2_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"        pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.dateV2_expected[0]) && (data.dateV2_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get date data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.dateV2_expected = _.orderBy(data.dateV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].original_text).to.eql(data.dateV2_expected[i].original_text);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid type\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.dateV2_expected = _.orderBy(data.dateV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.value.type).to.eql(data.dateV2_expected[i].type);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid day\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.dateV2_expected = _.orderBy(data.dateV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.value.dd).to.eql(data.dateV2_expected[i].dd);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid month\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.dateV2_expected = _.orderBy(data.dateV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.value.mm).to.eql(data.dateV2_expected[i].mm);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid year\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.dateV2_expected = _.orderBy(data.dateV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.value.yy).to.eql(data.dateV2_expected[i].yy);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid from\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.dateV2_expected = _.orderBy(data.dateV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.from).to.eql(data.dateV2_expected[i].from);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid to\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.dateV2_expected = _.orderBy(data.dateV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.to).to.eql(data.dateV2_expected[i].to);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid start_range\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.dateV2_expected = _.orderBy(data.dateV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.start_range).to.eql(data.dateV2_expected[i].start_range);",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid end_range\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.dateV2_expected = _.orderBy(data.dateV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.end_range).to.eql(data.dateV2_expected[i].end_range);",
							"       }",
							"    });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v2/date/?message={{dateV2_message}}&entity_name={{dateV2_entity_name}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v2",
						"date",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{dateV2_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{dateV2_entity_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Text Entity City",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c90d04c-a62e-4e78-bd67-710a7df2c53d",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('text_city_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.text_city_expected[0]) && (data.text_city_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get city text data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.text_city_expected = _.orderBy(data.text_city_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].original_text).to.eql(data.text_city_expected[i].original_text);",
							"       }",
							"    });",
							"",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid value\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.text_city_expected = _.orderBy(data.text_city_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.value.toLowerCase()).to.eql(data.text_city_expected[i].value.toLowerCase());",
							"       }",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v1/text/?message={{text_city_message}}&entity_name={{text_city_entity_name}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"text",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{text_city_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{text_city_entity_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Text Entity Restaurant",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c90d04c-a62e-4e78-bd67-710a7df2c53d",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('text_restaurant_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.text_restaurant_expected[0]) && (data.text_restaurant_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get restaurant text data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.text_restaurant_expected = _.orderBy(data.text_restaurant_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].original_text).to.eql(data.text_restaurant_expected[i].original_text);",
							"       }",
							"    });",
							"",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid value\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.text_restaurant_expected = _.orderBy(data.text_restaurant_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"            pm.expect(jsonData.data[i].entity_value.value.toLowerCase()).to.eql(data.text_restaurant_expected[i].value.toLowerCase());",
							"       }",
							"    });",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v1/text/?message={{text_restaurant_message}}&entity_name={{text_restaurant_entity_name}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1",
						"text",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{text_restaurant_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{text_restaurant_entity_name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Time entity V2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1fb98ca6-5e20-42da-9ce5-b9be1652c09c",
						"exec": [
							"var _ = require('lodash');",
							"var shouldBeSkipped = !('timeV2_expected' in data);",
							"",
							"(shouldBeSkipped ? pm.test.skip : pm.test)(\"Response is 200 OK\", function () {",
							"        pm.response.to.have.status(200);",
							"});",
							"",
							"//Check for null data",
							"if (!shouldBeSkipped && ('data' in data.timeV2_expected[0]) && (data.timeV2_expected[0].data === null)) {",
							"    pm.test(\"Response should have null data\", function() {",
							"       pm.expect(pm.response.json().data).to.eql(null);",
							"    });",
							"} else {",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"We get time data from the message\", function() {",
							"        pm.expect(pm.response.json().data.length).to.be.above(0);",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid original_text\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.timeV2_expected = _.orderBy(data.timeV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].original_text).to.eql(data.timeV2_expected[i].original_text); ",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid minutes\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.timeV2_expected = _.orderBy(data.timeV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.mm).to.eql(data.timeV2_expected[i].mm); ",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid hours\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.timeV2_expected = _.orderBy(data.timeV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.hh).to.eql(data.timeV2_expected[i].hh); ",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid normal\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.timeV2_expected = _.orderBy(data.timeV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.normal).to.eql(data.timeV2_expected[i].normal); ",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid timezone\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.timeV2_expected = _.orderBy(data.timeV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].entity_value.tz).to.eql(data.timeV2_expected[i].tz); ",
							"       }",
							"    });",
							"    ",
							"    (shouldBeSkipped ? pm.test.skip : pm.test)(\"Response data has valid language\", function() {",
							"       var jsonData = pm.response.json();",
							"       jsonData.data = _.orderBy(jsonData.data, [\"original_text\"]);",
							"       data.timeV2_expected = _.orderBy(data.timeV2_expected, [\"original_text\"]);",
							"       for(i = 0; i < jsonData.data.length; i++) {",
							"           pm.expect(jsonData.data[i].language).to.eql(data.timeV2_expected[i].language);",
							"       }",
							"    });",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{url}}/v2/time/?message={{timeV2_message}}&entity_name={{timeV2_entity_name}}",
					"protocol": "http",
					"host": [
						"{{url}}"
					],
					"path": [
						"v2",
						"time",
						""
					],
					"query": [
						{
							"key": "message",
							"value": "{{timeV2_message}}"
						},
						{
							"key": "entity_name",
							"value": "{{timeV2_entity_name}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}